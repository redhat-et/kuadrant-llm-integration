###############################################################################
# API‑KEY SECRETS (charge‑back tiers) ─ namespace: llm-d
###############################################################################
apiVersion: v1
kind: Secret
metadata:
  name: freeuser1-apikey
  namespace: llm-d
  labels:
    kuadrant.io/auth-secret: "true"
    app: llm-d-gateway
  annotations:
    kuadrant.io/groups: free
    secret.kuadrant.io/user-id: freeuser1
stringData:
  api_key: freeuser1_key
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: freeuser2-apikey
  namespace: llm-d
  labels:
    kuadrant.io/auth-secret: "true"
    app: llm-d-gateway
  annotations:
    kuadrant.io/groups: free
    secret.kuadrant.io/user-id: freeuser2
stringData:
  api_key: freeuser2_key
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: premiumuser1-apikey
  namespace: llm-d
  labels:
    kuadrant.io/auth-secret: "true"
    app: llm-d-gateway
  annotations:
    kuadrant.io/groups: premium
    secret.kuadrant.io/user-id: premiumuser1
stringData:
  api_key: premiumuser1_key
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: premiumuser2-apikey
  namespace: llm-d
  labels:
    kuadrant.io/auth-secret: "true"
    app: llm-d-gateway
  annotations:
    kuadrant.io/groups: premium
    secret.kuadrant.io/user-id: premiumuser2
stringData:
  api_key: premiumuser2_key
type: Opaque
---
apiVersion: v1
kind: Secret
metadata:
  name: enterpriseuser1-apikey
  namespace: llm-d
  labels:
    kuadrant.io/auth-secret: "true"
    app: llm-d-gateway
  annotations:
    kuadrant.io/groups: enterprise
    secret.kuadrant.io/user-id: enterpriseuser1
stringData:
  api_key: enterpriseuser1_key
type: Opaque
###############################################################################
# AUTHPOLICY – exposes userid / groups to the gateway
###############################################################################
---
apiVersion: kuadrant.io/v1
kind: AuthPolicy
metadata:
  name: chargeback-auth
  namespace: llm-d
spec:
  targetRef:
    group: gateway.networking.k8s.io
    kind: Gateway
    name: infra-sim-inference-gateway
  rules:
    authentication:
      api-key-users:
        apiKey:
          allNamespaces: true
          selector:
            matchLabels:
              app: llm-d-gateway
        credentials:
          authorizationHeader:
            prefix: APIKEY
    response:
      success:
        filters:
          identity:
            json:
              properties:
                userid:
                  selector: auth.identity.metadata.annotations.secret\.kuadrant\.io/user-id
                groups:
                  selector: auth.identity.metadata.annotations.kuadrant\.io/groups
    authorization:
      allow-groups:
        opa:
          rego: |
            groups := split(object.get(input.auth.identity.metadata.annotations, "kuadrant.io/groups", ""), ",")
            allow { groups[_] == "free" }
            allow { groups[_] == "premium" }
            allow { groups[_] == "enterprise" }
###############################################################################
# RATELIMITPOLICY – tiered request caps per group
###############################################################################
---
apiVersion: kuadrant.io/v1
kind: RateLimitPolicy
metadata:
  name: chargeback-limits
  namespace: llm-d
spec:
  targetRef:
    group: gateway.networking.k8s.io
    kind: Gateway
    name: infra-sim-inference-gateway
  limits:
    free-user-requests:
      rates:
        - limit: 2
          window: 2m
      when:
        - predicate: |
            auth.identity.groups.split(",").exists(g, g == "free")
      counters:
        - expression: auth.identity.userid
    premium-user-requests:
      rates:
        - limit: 10
          window: 2m
      when:
        - predicate: |
            auth.identity.groups.split(",").exists(g, g == "premium")
      counters:
        - expression: auth.identity.userid
    enterprise-user-requests:
      rates:
        - limit: 50
          window: 2m
      when:
        - predicate: |
            auth.identity.groups.split(",").exists(g, g == "enterprise")
      counters:
        - expression: auth.identity.userid
