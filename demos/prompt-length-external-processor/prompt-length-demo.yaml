---
apiVersion: v1
kind: Namespace
metadata:
  name: prompt-demo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: processor
  namespace: prompt-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: processor
  template:
    metadata:
      labels:
        app: processor
    spec:
      containers:
        - name: processor
          image: processor:latest
          ports:
            - containerPort: 50051
          env:
            - name: SMALL_THRESHOLD
              value: "1024"
            - name: MEDIUM_THRESHOLD
              value: "2048"
            - name: LARGE_THRESHOLD
              value: "2048"
---
apiVersion: v1
kind: Service
metadata:
  name: processor-service
  namespace: prompt-demo
spec:
  selector:
    app: processor
  ports:
    - protocol: TCP
      port: 50051
      targetPort: 50051
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
  namespace: prompt-demo
  labels:
    app: envoy
  annotations:
    description: Envoy configuration with ext_proc and ext_authz filters
  
data:
  envoy.yaml: |
    admin:
      address:
        socket_address: { address: 0.0.0.0, port_value: 9901 }
    static_resources:
      listeners:
        - name: listener_0
          address:
            socket_address: { address: 0.0.0.0, port_value: 8080 }
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: ingress_http
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: backend
                          domains: ["*"]
                          routes:
                            - match: { prefix: "/" }
                              route: { cluster: service_backend }
                    http_filters:
                      - name: envoy.filters.http.ext_proc
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.ext_proc.v3.ExternalProcessor
                          grpc_service:
                            envoy_grpc:
                              cluster_name: ext_proc_cluster
                          processing_mode:
                            request_header_mode: SEND
                            request_body_mode: BUFFERED
                            response_header_mode: SKIP
                            response_body_mode: NONE
                          max_message_timeout: 1s
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
        - name: service_backend
          connect_timeout: 0.25s
          type: logical_dns
          lb_policy: round_robin
          load_assignment:
            cluster_name: service_backend
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: httpbin.org
                          port_value: 80
        - name: ext_proc_cluster
          connect_timeout: 0.25s
          type: logical_dns
          lb_policy: round_robin
          typed_extension_protocol_options:
            envoy.extensions.upstreams.http.v3.HttpProtocolOptions:
              "@type": type.googleapis.com/envoy.extensions.upstreams.http.v3.HttpProtocolOptions
              explicit_http_config:
                http2_protocol_options: {}
          load_assignment:
            cluster_name: ext_proc_cluster
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: processor-service.prompt-demo.svc.cluster.local
                          port_value: 50051
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy
  namespace: prompt-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy
  template:
    metadata:
      labels:
        app: envoy
    spec:
      containers:
        - name: envoy
          image: envoyproxy/envoy:v1.28-latest
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: envoy-config
              mountPath: /etc/envoy
              readOnly: true
      volumes:
        - name: envoy-config
          configMap:
            name: envoy-config
---
apiVersion: v1
kind: Service
metadata:
  name: envoy
  namespace: prompt-demo
spec:
  selector:
    app: envoy
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
    - name: admin
      protocol: TCP
      port: 9901
      targetPort: 9901
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: opa-policy
  namespace: prompt-demo
  labels:
    app: opa
  annotations:
    description: OPA policy for prompt length
  
data:
  policy.rego: |
    package promptlength
    allow {
      input.request.http.headers["x-prompt-length"] != null
      to_number(input.request.http.headers["x-prompt-length"]) <= 2048
    }
    # Optionally, restrict by x-prompt-size-class
---
apiVersion: kuadrant.io/v1
kind: AuthPolicy
metadata:
  name: prompt-length-policy
  namespace: prompt-demo
spec:
  targetRef:
    group: gateway.networking.k8s.io
    kind: Gateway
    name: vllm-gateway
  rules:
    authentication:
      anonymous:
        anonymous: {}
    authorization:
      prompt-length-check:
        opa:
          rego: |
            package promptlength
            allow {
              input.request.http.headers["x-prompt-length"] != null
              to_number(input.request.http.headers["x-prompt-length"]) <= 2048
            }
---
apiVersion: kuadrant.io/v1
kind: RateLimitPolicy
metadata:
  name: prompt-size-class-limits
  namespace: prompt-demo
spec:
  targetRef:
    group: gateway.networking.k8s.io
    kind: Gateway
    name: vllm-gateway
  limits:
    small-prompts:
      rates:
        - limit: 100
          window: 1m
      when:
        - predicate: |
            request.headers["x-prompt-size-class"] == "small"
    medium-prompts:
      rates:
        - limit: 50
          window: 1m
      when:
        - predicate: |
            request.headers["x-prompt-size-class"] == "medium"
    large-prompts:
      rates:
        - limit: 10
          window: 1m
      when:
        - predicate: |
            request.headers["x-prompt-size-class"] == "large" 